import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Mic, MicOff, MessageSquare, Volume2, VolumeX } from "lucide-react";

interface Language {
  code: string;
  name: string;
  flag: string;
  speechLang: string;
}

interface Message {
  type: 'user' | 'assistant';
  text: string;
  timestamp: Date;
}

interface VoiceAssistantModalProps {
  isOpen: boolean;
  onClose: () => void;
  userType: 'farmer' | 'retailer' | 'consumer';
}

const languages: Language[] = [
  { code: 'en', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕', speechLang: 'en-US' },
  { code: 'hi', name: 'Hindi', flag: 'ЁЯЗоЁЯЗ│', speechLang: 'hi-IN' },
  { code: 'ta', name: 'Tamil', flag: 'ЁЯЗоЁЯЗ│', speechLang: 'ta-IN' },
  { code: 'te', name: 'Telugu', flag: 'ЁЯЗоЁЯЗ│', speechLang: 'te-IN' }
];

const multilingual = {
  en: {
    selectLanguage: "Select your language",
    voiceAssistant: "Voice Assistant",
    startListening: "Start Listening",
    stopListening: "Stop Listening",
    currentlySupported: "Currently supporting limited commands in English",
    greeting: {
      farmer: "Hello! I'm here to help you with your farming needs. You can ask me about crop prices, disease detection, or government schemes.",
      retailer: "Hello! I can help you find the best suppliers, negotiate prices, and manage your inventory. What would you like assistance with?",
      consumer: "Hello! I can help you find fresh produce, track your orders, and discover new farmers. How can I assist you today?"
    },
    sampleQuestions: {
      farmer: [
        "What are today's mandi prices?",
        "How to detect crop diseases?", 
        "Tell me about government schemes"
      ],
      retailer: [
        "Find best price for tomatoes",
        "Show me top rated suppliers",
        "Help me negotiate better deals"
      ],
      consumer: [
        "Where can I find organic vegetables?",
        "Track my recent order",
        "Show me seasonal fruits"
      ]
    }
  },
  hi: {
    selectLanguage: "рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
    voiceAssistant: "рдЖрд╡рд╛рдЬ рд╕рд╣рд╛рдпрдХ",
    startListening: "рд╕реБрдирдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ",
    stopListening: "рд╕реБрдирдирд╛ рдмрдВрдж рдХрд░реЗрдВ", 
    currentlySupported: "рд╡рд░реНрддрдорд╛рди рдореЗрдВ рд╣рд┐рдВрджреА рдореЗрдВ рд╕реАрдорд┐рдд рдХрдорд╛рдВрдб рдХрд╛ рд╕рдорд░реНрдерди рдХрд░ рд░рд╣реЗ рд╣реИрдВ",
    greeting: {
      farmer: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХреА рдЦреЗрддреА рдХреА рдЬрд░реВрд░рддреЛрдВ рдореЗрдВ рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдЖрдк рдореБрдЭрд╕реЗ рдлрд╕рд▓ рдХреА рдХреАрдорддреЗрдВ, рдмреАрдорд╛рд░реА рдХреА рдЬрд╛рдВрдЪ, рдпрд╛ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред",
      retailer: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХреЛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреЗ рдЖрдкреВрд░реНрддрд┐рдХрд░реНрддрд╛ рдЦреЛрдЬрдиреЗ, рдХреАрдорддреЛрдВ рдкрд░ рдмрд╛рддрдЪреАрдд рдХрд░рдиреЗ рдФрд░ рдЖрдкрдХреА рдЗрдиреНрд╡реЗрдВрдЯреНрд░реА рдХрд╛ рдкреНрд░рдмрдВрдзрди рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред",
      consumer: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХреЛ рддрд╛рдЬреА рдЙрдкрдЬ рдЦреЛрдЬрдиреЗ, рдЕрдкрдиреЗ рдСрд░реНрдбрд░ рдХреЛ рдЯреНрд░реИрдХ рдХрд░рдиреЗ рдФрд░ рдирдП рдХрд┐рд╕рд╛рдиреЛрдВ рдХреА рдЦреЛрдЬ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред"
    },
    sampleQuestions: {
      farmer: [
        "рдЖрдЬ рдХреЗ рдордВрдбреА рднрд╛рд╡ рдХреНрдпрд╛ рд╣реИрдВ?",
        "рдлрд╕рд▓ рдХреА рдмреАрдорд╛рд░реА рдХреИрд╕реЗ рдкрд╣рдЪрд╛рдиреЗрдВ?",
        "рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ"
      ],
      retailer: [
        "рдЯрдорд╛рдЯрд░ рдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рдХреАрдордд рдЦреЛрдЬреЗрдВ",
        "рдореБрдЭреЗ рд╢реАрд░реНрд╖ рд░реЗрдЯреЗрдб рдЖрдкреВрд░реНрддрд┐рдХрд░реНрддрд╛ рджрд┐рдЦрд╛рдПрдВ",
        "рдмреЗрд╣рддрд░ рд╕реМрджреЗ рдХреА рдмрд╛рддрдЪреАрдд рдореЗрдВ рдорджрдж рдХрд░реЗрдВ"
      ],
      consumer: [
        "рдореБрдЭреЗ рдЬреИрд╡рд┐рдХ рд╕рдмреНрдЬрд┐рдпрд╛рдВ рдХрд╣рд╛рдБ рдорд┐рд▓ рд╕рдХрддреА рд╣реИрдВ?",
        "рдореЗрд░реЗ рд╣рд╛рд▓ рдХреЗ рдСрд░реНрдбрд░ рдХреЛ рдЯреНрд░реИрдХ рдХрд░реЗрдВ",
        "рдореБрдЭреЗ рдореМрд╕рдореА рдлрд▓ рджрд┐рдЦрд╛рдПрдВ"
      ]
    }
  },
  ta: {
    selectLanguage: "роЙроЩрпНроХро│рпН роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
    voiceAssistant: "роХрпБро░ро▓рпН роЙродро╡ро┐ропро╛ро│ро░рпН",
    startListening: "роХрпЗроЯрпНроХ роЖро░роорпНрокро┐роХрпНроХро╡рпБроорпН",
    stopListening: "роХрпЗроЯрпНрокродрпИ роиро┐ро▒рпБродрпНродро╡рпБроорпН",
    currentlySupported: "родро▒рпНрокрпЛродрпБ родрооро┐ро┤ро┐ро▓рпН ро╡ро░рпИропро▒рпБроХрпНроХрокрпНрокроЯрпНроЯ роХроЯрпНроЯро│рпИроХро│рпИ роЖродро░ро┐роХрпНроХро┐ро▒родрпБ",
    greeting: {
      farmer: "ро╡рогроХрпНроХроорпН! роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп родрпЗро╡рпИроХро│ро┐ро▓рпН роЙродро╡ роиро╛ройрпН роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. рокропро┐ро░рпН ро╡ро┐ро▓рпИроХро│рпН, роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН роЕро▓рпНро▓родрпБ роЕро░роЪро╛роЩрпНроХ родро┐роЯрпНроЯроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ роОройрпНройро┐роЯроорпН роХрпЗроЯрпНроХро▓ро╛роорпН.",
      retailer: "ро╡рогроХрпНроХроорпН! роЪро┐ро▒роирпНрод роЪрокрпНро│рпИропро░рпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН, ро╡ро┐ро▓рпИроХро│рпИ рокрпЗро░роорпН рокрпЗроЪро╡рпБроорпН, роЙроЩрпНроХро│рпН роЪро░роХрпНроХрпБроХро│рпИ роиро┐ро░рпНро╡роХро┐роХрпНроХро╡рпБроорпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН.",
      consumer: "ро╡рогроХрпНроХроорпН! рокрпБродро┐роп ро╡ро┐ро│рпИрокрпКро░рпБроЯрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН, роЙроЩрпНроХро│рпН роЖро░рпНроЯро░рпНроХро│рпИроХрпН роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН, рокрпБродро┐роп ро╡ро┐ро╡роЪро╛ропро┐роХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН."
    },
    sampleQuestions: {
      farmer: [
        "роЗройрпНро▒рпИроп роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН роОройрпНрой?",
        "рокропро┐ро░рпН роирпЛропрпИроХрпН роХрогрпНроЯро▒ро┐ро╡родрпБ роОрокрпНрокроЯро┐?",
        "роЕро░роЪро╛роЩрпНроХ родро┐роЯрпНроЯроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН"
      ],
      retailer: [
        "родроХрпНроХро╛ро│ро┐роХрпНроХрпБ роЪро┐ро▒роирпНрод ро╡ро┐ро▓рпИропрпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН",
        "роОройроХрпНроХрпБ роЙропро░рпН роородро┐рокрпНрокрпАроЯрпНроЯрпБ роЪрокрпНро│рпИропро░рпНроХро│рпИроХрпН роХро╛роЯрпНроЯрпБроЩрпНроХро│рпН",
        "роЪро┐ро▒роирпНрод роТрокрпНрокроирпНродроорпН рокрпЗроЪ роЙродро╡рпБроЩрпНроХро│рпН"
      ],
      consumer: [
        "роОройроХрпНроХрпБ роЗропро▒рпНроХрпИ роХро╛ропрпНроХро▒ро┐роХро│рпН роОроЩрпНроХрпЗ роХро┐роЯрпИроХрпНроХрпБроорпН?",
        "роОройрпН роЪроорпАрокродрпНродро┐роп роЖро░рпНроЯро░рпИроХрпН роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН",
        "роОройроХрпНроХрпБ рокро░рпБро╡роХро╛ро▓ рокро┤роЩрпНроХро│рпИроХрпН роХро╛роЯрпНроЯрпБроЩрпНроХро│рпН"
      ]
    }
  },
  te: {
    selectLanguage: "р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
    voiceAssistant: "р░╡р░╛р░пр░┐р░╕р▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н",
    startListening: "р░╡р░┐р░ир░бр░В р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐",
    stopListening: "р░╡р░┐р░ир░бр░В р░Жр░кр░Вр░бр░┐",
    currentlySupported: "р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░В р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░кр░░р░┐р░ор░┐р░д р░Жр░жр▒Зр░╢р░╛р░▓р░Хр▒Б р░ор░жр▒Нр░жр░др▒Б р░Зр░╕р▒Нр░др▒Лр░Вр░жр░┐",
    greeting: {
      farmer: "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ер░╡р░╕р░░р░╛р░▓р░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б. р░кр░Вр░Я р░зр░░р░▓р▒Б, р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б р░▓р▒Зр░жр░╛ р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░ир░ир▒Нр░ир▒Б р░Ер░бр░Чр░╡р░Ър▒Нр░Ър▒Б.",
      retailer: "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░Йр░др▒Нр░др░о р░╕р░░р░лр░░р░╛р░жр░╛р░░р▒Бр░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░бр░╛р░ир░┐р░Хр░┐, р░зр░░р░▓р░ир▒Б р░мр▒Зр░░р░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░ор░░р░┐р░пр▒Б р░ор▒А р░Зр░ир▒Нр░╡р▒Жр░Вр░Яр░░р▒Ар░ир░┐ р░ир░┐р░░р▒Нр░╡р░╣р░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б.",
      consumer: "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░др░╛р░Ьр░╛ р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░бр░╛р░ир░┐р░Хр░┐, р░ор▒А р░Жр░░р▒Нр░бр░░р▒НтАМр░▓р░ир▒Б р░Яр▒Нр░░р░╛р░Хр▒Н р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░ор░░р░┐р░пр▒Б р░Хр▒Кр░др▒Нр░д р░░р▒Ир░др▒Бр░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░бр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б."
    },
    sampleQuestions: {
      farmer: [
        "р░ир▒Зр░Яр░┐ р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б р░Пр░ор░┐р░Яр░┐?",
        "р░кр░Вр░Я р░╡р▒Нр░пр░╛р░зр░┐р░ир░┐ р░Ор░▓р░╛ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░╛р░▓р░┐?",
        "р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐"
      ],
      retailer: [
        "р░Яр░ор▒Лр░Яр░╛р░▓р░Хр▒Б р░Йр░др▒Нр░др░о р░зр░░р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐",
        "р░ир░╛р░Хр▒Б р░Ер░др▒Нр░пр░зр░┐р░Х р░░р▒Зр░Яр░┐р░Вр░Чр▒Н р░Йр░ир▒Нр░и р░╕р░░р░лр░░р░╛р░жр░╛р░░р▒Бр░▓р░ир▒Б р░Ър▒Вр░кр░┐р░Вр░Ър░Вр░бр░┐",
        "р░ор▒Жр░░р▒Бр░Чр▒Ир░и р░бр▒Ар░▓р▒Нр░╕р▒Н р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Вр░бр░┐"
      ],
      consumer: [
        "р░ир░╛р░Хр▒Б р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░Хр▒Вр░░р░Чр░╛р░пр░▓р▒Б р░Ор░Хр▒Нр░Хр░б р░жр▒Кр░░р▒Бр░Хр▒Бр░др░╛р░пр░┐?",
        "р░ир░╛ р░Зр░Яр▒Ар░╡р░▓р░┐ р░Жр░░р▒Нр░бр░░р▒НтАМр░ир▒Б р░Яр▒Нр░░р░╛р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
        "р░ир░╛р░Хр▒Б р░Хр░╛р░▓р░╛р░ир▒Бр░Чр▒Бр░г р░кр░Вр░бр▒Нр░▓р░ир▒Б р░Ър▒Вр░кр░┐р░Вр░Ър░Вр░бр░┐"
      ]
    }
  }
};

const VoiceAssistantModal = ({ isOpen, onClose, userType }: VoiceAssistantModalProps) => {
  const [selectedLanguage, setSelectedLanguage] = useState<string>('');
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [recognition, setRecognition] = useState<SpeechRecognition | null>(null);

  // Initialize speech recognition
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
      const recognitionInstance = new SpeechRecognition();
      recognitionInstance.continuous = false;
      recognitionInstance.interimResults = false;
      setRecognition(recognitionInstance);
    }
  }, []);

  // Set up speech recognition events
  useEffect(() => {
    if (!recognition || !selectedLanguage) return;

    const currentLang = languages.find(lang => lang.code === selectedLanguage);
    if (currentLang) {
      recognition.lang = currentLang.speechLang;
    }

    recognition.onstart = () => setIsListening(true);
    recognition.onend = () => setIsListening(false);
    
    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      handleUserMessage(transcript);
    };

    recognition.onerror = (event) => {
      console.error('Speech recognition error:', event.error);
      setIsListening(false);
    };

    return () => {
      recognition.onstart = null;
      recognition.onend = null;
      recognition.onresult = null;
      recognition.onerror = null;
    };
  }, [recognition, selectedLanguage]);

  const startListening = () => {
    if (recognition && !isListening) {
      recognition.start();
    }
  };

  const stopListening = () => {
    if (recognition && isListening) {
      recognition.stop();
    }
  };

  const speak = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      const currentLang = languages.find(lang => lang.code === selectedLanguage);
      
      if (currentLang) {
        utterance.lang = currentLang.speechLang;
      }

      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      
      speechSynthesis.speak(utterance);
    }
  };

  const handleUserMessage = (text: string) => {
    const userMessage: Message = {
      type: 'user',
      text,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);

    // Simulate assistant response
    setTimeout(() => {
      const assistantResponse = generateResponse(text, selectedLanguage as keyof typeof multilingual, userType);
      const assistantMessage: Message = {
        type: 'assistant',
        text: assistantResponse,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, assistantMessage]);
      speak(assistantResponse);
    }, 1000);
  };

  const generateResponse = (userText: string, lang: keyof typeof multilingual, type: string): string => {
    const responses = {
      en: {
        farmer: {
          price: "Today's mandi prices: Wheat тВ╣2,125/quintal (+2.5%), Rice тВ╣1,890/quintal (-1.2%), Tomato тВ╣35/kg (+8.3%)",
          disease: "For disease detection, please upload a clear photo of affected leaves. Our AI can identify common diseases like blight, rust, and mildew.",
          scheme: "Government schemes available: PM-KISAN (тВ╣6,000/year), Crop Insurance (90% coverage), and Soil Health Cards for free soil testing."
        },
        retailer: {
          price: "Best tomato prices today: тВ╣32/kg from Rajesh Kumar (4.8тШЕ), тВ╣35/kg from Priya Sharma (4.7тШЕ). Both offer minimum 50kg orders.",
          supplier: "Top suppliers: Rajesh Kumar (Maharashtra, 4.8тШЕ), Suresh Patel (Punjab, 4.9тШЕ), both with excellent delivery records.",
          negotiate: "For better deals, consider bulk orders, advance payment, or seasonal contracts. I can help you draft negotiation points."
        },
        consumer: {
          organic: "Organic vegetables available from: Rajesh Kumar (tomatoes, spinach), Priya Sharma (leafy greens), Kiran Patil (seasonal produce).",
          order: "Your order ORD202 is in transit. Expected delivery: Jan 17, 2024. Items: Basmati Rice, Mangoes. Total: тВ╣580.",
          seasonal: "Seasonal fruits now: Mangoes (тВ╣120/kg), Oranges (тВ╣60/kg), Pomegranates (тВ╣180/kg). All freshly harvested!"
        }
      },
      hi: {
        farmer: {
          price: "рдЖрдЬ рдХреЗ рдордВрдбреА рднрд╛рд╡: рдЧреЗрд╣реВрдВ тВ╣2,125/рдХреНрд╡рд┐рдВрдЯрд▓ (+2.5%), рдЪрд╛рд╡рд▓ тВ╣1,890/рдХреНрд╡рд┐рдВрдЯрд▓ (-1.2%), рдЯрдорд╛рдЯрд░ тВ╣35/рдХрд┐рдЧреНрд░рд╛ (+8.3%)",
          disease: "рдмреАрдорд╛рд░реА рдХреА рдЬрд╛рдВрдЪ рдХреЗ рд▓рд┐рдП, рдкреНрд░рднрд╛рд╡рд┐рдд рдкрддреНрддрд┐рдпреЛрдВ рдХреА рд╕реНрдкрд╖реНрдЯ рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред рд╣рдорд╛рд░рд╛ AI рд╕рд╛рдорд╛рдиреНрдп рдмреАрдорд╛рд░рд┐рдпреЛрдВ рдХреА рдкрд╣рдЪрд╛рди рдХрд░ рд╕рдХрддрд╛ рд╣реИред",
          scheme: "рдЙрдкрд▓рдмреНрдз рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ: рдкреАрдПрдо-рдХрд┐рд╕рд╛рди (тВ╣6,000/рд╡рд░реНрд╖), рдлрд╕рд▓ рдмреАрдорд╛ (90% рдХрд╡рд░реЗрдЬ), рдФрд░ рдореБрдлреНрдд рдорд┐рдЯреНрдЯреА рдкрд░реАрдХреНрд╖рдг рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛рд░реНрдбред"
        },
        retailer: {
          price: "рдЖрдЬ рдЯрдорд╛рдЯрд░ рдХреА рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рдХреАрдорддреЗрдВ: рд░рд╛рдЬреЗрд╢ рдХреБрдорд╛рд░ рд╕реЗ тВ╣32/рдХрд┐рдЧреНрд░рд╛ (4.8тШЕ), рдкреНрд░рд┐рдпрд╛ рд╢рд░реНрдорд╛ рд╕реЗ тВ╣35/рдХрд┐рдЧреНрд░рд╛ (4.7тШЕ)ред",
          supplier: "рд╢реАрд░реНрд╖ рдЖрдкреВрд░реНрддрд┐рдХрд░реНрддрд╛: рд░рд╛рдЬреЗрд╢ рдХреБрдорд╛рд░ (рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░, 4.8тШЕ), рд╕реБрд░реЗрд╢ рдкрдЯреЗрд▓ (рдкрдВрдЬрд╛рдм, 4.9тШЕ), рджреЛрдиреЛрдВ рдмреЗрд╣рддрд░реАрди рдбрд┐рд▓реАрд╡рд░реА рд░рд┐рдХреЙрд░реНрдб рдХреЗ рд╕рд╛рдеред",
          negotiate: "рдмреЗрд╣рддрд░ рд╕реМрджреЛрдВ рдХреЗ рд▓рд┐рдП, рдмрд▓реНрдХ рдСрд░реНрдбрд░, рдПрдбрд╡рд╛рдВрд╕ рдкреЗрдореЗрдВрдЯ, рдпрд╛ рд╕реАрдЬрдирд▓ рдХреЙрдиреНрдЯреНрд░реИрдХреНрдЯ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВред"
        },
        consumer: {
          organic: "рдЬреИрд╡рд┐рдХ рд╕рдмреНрдЬрд┐рдпрд╛рдВ рдЙрдкрд▓рдмреНрдз: рд░рд╛рдЬреЗрд╢ рдХреБрдорд╛рд░ (рдЯрдорд╛рдЯрд░, рдкрд╛рд▓рдХ), рдкреНрд░рд┐рдпрд╛ рд╢рд░реНрдорд╛ (рд╣рд░реА рдкрддреНрддреЗрджрд╛рд░ рд╕рдмреНрдЬрд┐рдпрд╛рдВ), рдХрд┐рд░рди рдкрд╛рдЯрд┐рд▓ (рдореМрд╕рдореА рдЙрддреНрдкрд╛рдж)ред",
          order: "рдЖрдкрдХрд╛ рдСрд░реНрдбрд░ ORD202 рдЯреНрд░рд╛рдВрдЬрд┐рдЯ рдореЗрдВ рд╣реИред рдЕрдкреЗрдХреНрд╖рд┐рдд рдбрд┐рд▓реАрд╡рд░реА: 17 рдЬрдирд╡рд░реА, 2024ред рдЖрдЗрдЯрдо: рдмрд╛рд╕рдорддреА рдЪрд╛рд╡рд▓, рдЖрдоред рдХреБрд▓: тВ╣580ред",
          seasonal: "рдЕрднреА рдореМрд╕рдореА рдлрд▓: рдЖрдо (тВ╣120/рдХрд┐рдЧреНрд░рд╛), рд╕рдВрддрд░реЗ (тВ╣60/рдХрд┐рдЧреНрд░рд╛), рдЕрдирд╛рд░ (тВ╣180/рдХрд┐рдЧреНрд░рд╛)ред рд╕рднреА рддрд╛рдЬрд╛ рдХрдЯреЗ рд╣реБрдП!"
        }
      },
      ta: {
        farmer: {
          price: "роЗройрпНро▒рпИроп роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН: роХрпЛродрпБроорпИ тВ╣2,125/роХрпБро╡ро┐рогрпНроЯро▓рпН (+2.5%), роЕро░ро┐роЪро┐ тВ╣1,890/роХрпБро╡ро┐рогрпНроЯро▓рпН (-1.2%), родроХрпНроХро╛ро│ро┐ тВ╣35/роХро┐ро▓рпЛ (+8.3%)",
          disease: "роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпБроХрпНроХрпБ, рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ роЗро▓рпИроХро│ро┐ройрпН родрпЖро│ро┐ро╡ро╛рой рокрпБроХрпИрокрпНрокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН. роОроЩрпНроХро│рпН AI рокрпКродрпБро╡ро╛рой роирпЛропроЩрпНроХро│рпИ роЕроЯрпИропро╛ро│роорпН роХро╛рог роорпБроЯро┐ропрпБроорпН.",
          scheme: "роХро┐роЯрпИроХрпНроХрпБроорпН роЕро░роЪро╛роЩрпНроХ родро┐роЯрпНроЯроЩрпНроХро│рпН: PM-KISAN (тВ╣6,000/роЖрогрпНроЯрпБ), рокропро┐ро░рпН роХро╛рокрпНрокрпАроЯрпБ (90% роХро╡ро░рпЗроЬрпН), роЗро▓ро╡роЪ роорогрпН рокро░ро┐роЪрпЛродройрпИроХрпНроХро╛рой роЖро░рпЛроХрпНроХро┐роп роЕроЯрпНроЯрпИроХро│рпН."
        },
        retailer: {
          price: "роЗройрпНро▒рпБ родроХрпНроХро╛ро│ро┐ропро┐ройрпН роЪро┐ро▒роирпНрод ро╡ро┐ро▓рпИроХро│рпН: ро░ро╛роЬрпЗро╖рпН роХрпБрооро╛ро░ро┐роЯрооро┐ро░рпБроирпНродрпБ тВ╣32/роХро┐ро▓рпЛ (4.8тШЕ), рокро┐ро░ро┐ропро╛ роЪро░рпНрооро╛ро╡ро┐роЯрооро┐ро░рпБроирпНродрпБ тВ╣35/роХро┐ро▓рпЛ (4.7тШЕ)ред",
          supplier: "роЪро┐ро▒роирпНрод роЪрокрпНро│рпИропро░рпНроХро│рпН: ро░ро╛роЬрпЗро╖рпН роХрпБрооро╛ро░рпН (роороХро╛ро░ро╛ро╖рпНроЯро┐ро░ро╛, 4.8тШЕ), роЪрпБро░рпЗро╖рпН рокроЯрпНроЯрпЗро▓рпН (рокроЮрпНроЪро╛рокрпН, 4.9тШЕ), роЗро░рпБро╡ро░рпБроорпЗ роЪро┐ро▒роирпНрод роЯрпЖро▓ро┐ро╡ро░ро┐ ро░рпЖроХрпНроХро╛ро░рпНроЯрпБроЯройрпН.",
          negotiate: "роЪро┐ро▒роирпНрод роТрокрпНрокроирпНродроЩрпНроХро│рпБроХрпНроХрпБ, роорпКродрпНрод роЖро░рпНроЯро░рпНроХро│рпН, роорпБройрпНройрпЗро▒рпНро▒ рокрогроорпН роЕро▓рпНро▓родрпБ рокро░рпБро╡роХро╛ро▓ роТрокрпНрокроирпНродроЩрпНроХро│рпИроХрпН роХро░рпБродрпБроЩрпНроХро│рпН."
        },
        consumer: {
          organic: "роЗропро▒рпНроХрпИ роХро╛ропрпНроХро▒ро┐роХро│рпН роХро┐роЯрпИроХрпНроХрпБроорпН: ро░ро╛роЬрпЗро╖рпН роХрпБрооро╛ро░рпН (родроХрпНроХро╛ро│ро┐, роХрпАро░рпИ), рокро┐ро░ро┐ропро╛ роЪро░рпНрооро╛ (роЗро▓рпИроХрпН роХро╛ропрпНроХро▒ро┐роХро│рпН), роХро┐ро░рогрпН рокро╛роЯрпНроЯрпАро▓рпН (рокро░рпБро╡роХро╛ро▓ роЙро▒рпНрокродрпНродро┐)ред",
          order: "роЙроЩрпНроХро│рпН роЖро░рпНроЯро░рпН ORD202 рокрпЛроХрпНроХрпБро╡ро░родрпНродро┐ро▓рпН роЙро│рпНро│родрпБ. роОродро┐ро░рпНрокро╛ро░рпНроХрпНроХрокрпНрокроЯрпБроорпН роЯрпЖро▓ро┐ро╡ро░ро┐: роЬрой 17, 2024. рокрпКро░рпБроЯрпНроХро│рпН: рокро╛ро╕рпНроородро┐ роЕро░ро┐роЪро┐, рооро╛роорпНрокро┤роорпН. роорпКродрпНродроорпН: тВ╣580.",
          seasonal: "роЗрокрпНрокрпЛродрпИроп рокро░рпБро╡роХро╛ро▓ рокро┤роЩрпНроХро│рпН: рооро╛роорпНрокро┤роорпН (тВ╣120/роХро┐ро▓рпЛ), роЖро░роЮрпНроЪрпБ (тВ╣60/роХро┐ро▓рпЛ), рооро╛родрпБро│рпИ (тВ╣180/роХро┐ро▓рпЛ). роЕройрпИродрпНродрпБроорпН рокрпБродро┐родро╛роХ роЕро▒рпБро╡роЯрпИ роЪрпЖропрпНропрокрпНрокроЯрпНроЯро╡рпИ!"
        }
      },
      te: {
        farmer: {
          price: "р░ир▒Зр░Яр░┐ р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б: р░Чр▒Лр░зр▒Бр░о тВ╣2,125/р░Хр▒Нр░╡р░┐р░Вр░Яр░▓р▒НтАМ (+2.5%), р░мр░┐р░пр▒Нр░пр░В тВ╣1,890/р░Хр▒Нр░╡р░┐р░Вр░Яр░▓р▒НтАМ (-1.2%), р░Яр░ор░╛р░Яр▒Л тВ╣35/р░Хр░┐р░▓р▒Л (+8.3%)",
          disease: "р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б р░Хр▒Лр░╕р░В, р░мр░╛р░зр░┐р░д р░Жр░Хр▒Бр░▓ р░╕р▒Нр░кр░╖р▒Нр░Яр░ор▒Ир░и р░лр▒Лр░Яр▒Л р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐. р░ор░╛ AI р░╕р░╛р░зр░╛р░░р░г р░╡р▒Нр░пр░╛р░зр▒Бр░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░Чр░▓р░жр▒Б.",
          scheme: "р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░Йр░ир▒Нр░и р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б: PM-KISAN (тВ╣6,000/р░╕р░Вр░╡р░др▒Нр░╕р░░р░В), р░кр░Вр░Я р░мр▒Ар░ор░╛ (90% р░Хр░╡р░░р▒Зр░Ьр▒Н), р░Йр░Ър░┐р░д р░ор░Яр▒Нр░Яр░┐ р░кр░░р▒Ар░Хр▒Нр░╖ р░Хр▒Лр░╕р░В р░Жр░░р▒Лр░Чр▒Нр░п р░Хр░╛р░░р▒Нр░бр▒Бр░▓р▒Б."
        },
        retailer: {
          price: "р░ир▒Зр░бр▒Б р░Яр░ор░╛р░Яр▒Л р░Йр░др▒Нр░др░о р░зр░░р░▓р▒Б: р░░р░╛р░Ьр▒Зр░╖р▒Н р░Хр▒Бр░ор░╛р░░р▒Н р░ир▒Бр░Вр░бр░┐ тВ╣32/р░Хр░┐р░▓р▒Л (4.8тШЕ), р░кр▒Нр░░р░┐р░пр░╛ р░╢р░░р▒Нр░о р░ир▒Бр░Вр░бр░┐ тВ╣35/р░Хр░┐р░▓р▒Л (4.7тШЕ).",
          supplier: "р░Яр░╛р░кр▒Н р░╕р░кр▒Нр░▓р▒Ир░пр░░р▒Нр░▓р▒Б: р░░р░╛р░Ьр▒Зр░╖р▒Н р░Хр▒Бр░ор░╛р░░р▒Н (р░ор░╣р░╛р░░р░╛р░╖р▒Нр░Яр▒Нр░░, 4.8тШЕ), р░╕р▒Бр░░р▒Зр░╖р▒Н р░кр░Яр▒Зр░▓р▒Н (р░кр░Вр░Ьр░╛р░мр▒Н, 4.9тШЕ), р░Зр░жр▒Нр░жр░░р▒В р░Ер░жр▒Нр░нр▒Бр░др░ор▒Ир░и р░бр▒Жр░▓р░┐р░╡р░░р▒А р░░р░┐р░Хр░╛р░░р▒Нр░бр▒Бр░▓р░др▒Л.",
          negotiate: "р░ор▒Жр░░р▒Бр░Чр▒Ир░и р░бр▒Ар░▓р▒Нр░╕р▒Н р░Хр▒Лр░╕р░В, р░мр░▓р▒Нр░Хр▒Н р░Жр░░р▒Нр░бр░░р▒Нр░▓р▒Б, р░Ер░бр▒Нр░╡р░╛р░ир▒Нр░╕р▒Н р░кр▒Зр░ор▒Жр░Вр░Яр▒Н р░▓р▒Зр░жр░╛ р░╕р▒Ар░Ьр░ир░▓р▒Н р░Хр░╛р░Вр░Яр▒Нр░░р░╛р░Хр▒Нр░Яр▒Бр░▓р░ир▒Б р░кр░░р░┐р░Чр░гр░┐р░Вр░Ър░Вр░бр░┐."
        },
        consumer: {
          organic: "р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░Хр▒Вр░░р░Чр░╛р░пр░▓р▒Б р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л: р░░р░╛р░Ьр▒Зр░╖р▒Н р░Хр▒Бр░ор░╛р░░р▒Н (р░Яр░ор░╛р░Яр▒Лр░▓р▒Б, р░кр░╛р░▓р░Хр▒Вр░░), р░кр▒Нр░░р░┐р░пр░╛ р░╢р░░р▒Нр░о (р░Жр░Хр▒Бр░Хр▒Вр░░р░▓р▒Б), р░Хр░┐р░░ржгр▒Н р░кр░╛р░Яр░┐р░▓р▒Н (р░Хр░╛р░▓р░╛р░ир▒Бр░Чр▒Бр░г р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б).",
          order: "р░ор▒А р░Жр░░р▒Нр░бр░░р▒Н ORD202 р░Яр▒Нр░░р░╛р░ир▒Нр░╕р░┐р░Яр▒НтАМр░▓р▒Л р░Йр░Вр░жр░┐. р░Жр░╢р░┐р░Вр░Ър░┐р░и р░бр▒Жр░▓р░┐р░╡р░░р▒А: р░Ьр░и 17, 2024. р░╡р░╕р▒Нр░др▒Бр░╡р▒Бр░▓р▒Б: р░мр░╛р░╕р▒Нр░ор░др░┐ р░░р▒Ир░╕р▒Н, р░ор░╛р░ор░┐р░бр░┐р░Хр░╛р░пр░▓р▒Б. р░ор▒Кр░др▒Нр░др░В: тВ╣580.",
          seasonal: "р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░Хр░╛р░▓р░╛р░ир▒Бр░Чр▒Бр░г р░кр░Вр░бр▒Нр░▓р▒Б: р░ор░╛р░ор░┐р░бр░┐р░Хр░╛р░пр░▓р▒Б (тВ╣120/р░Хр░┐р░▓р▒Л), р░ир░╛р░░р░┐р░Вр░Ьр░▓р▒Б (тВ╣60/р░Хр░┐р░▓р▒Л), р░жр░╛р░ир░┐р░ор▒Нр░ор░▓р▒Б (тВ╣180/р░Хр░┐р░▓р▒Л). р░Ер░ир▒Нр░ир▒А р░др░╛р░Ьр░╛р░Чр░╛ р░Хр▒Лр░╕р░┐р░ир░╡р░┐!"
        }
      }
    };

    const langResponses = responses[lang]?.[type as keyof typeof responses['en']] || responses.en[type as keyof typeof responses['en']];
    
    // Simple keyword matching for responses
    const lowerText = userText.toLowerCase();
    if (lowerText.includes('price') || lowerText.includes('cost') || lowerText.includes('рднрд╛рд╡') || lowerText.includes('ро╡ро┐ро▓рпИ') || lowerText.includes('р░зр░░')) {
      return langResponses?.price || "I can help you with price information.";
    }
    if (lowerText.includes('disease') || lowerText.includes('рдмреАрдорд╛рд░реА') || lowerText.includes('роирпЛропрпН') || lowerText.includes('р░╡р▒Нр░пр░╛р░зр░┐')) {
      return langResponses?.disease || "I can help with disease detection.";
    }
    if (lowerText.includes('scheme') || lowerText.includes('рдпреЛрдЬрдирд╛') || lowerText.includes('родро┐роЯрпНроЯроорпН') || lowerText.includes('р░кр░ер░Хр░В')) {
      return langResponses?.scheme || "I can provide information about government schemes.";
    }
    if (lowerText.includes('supplier') || lowerText.includes('рдЖрдкреВрд░реНрддрд┐рдХрд░реНрддрд╛') || lowerText.includes('роЪрокрпНро│рпИропро░рпН') || lowerText.includes('р░╕р░кр▒Нр░▓р▒Ир░пр░░р▒Н')) {
      return langResponses?.supplier || "I can help you find suppliers.";
    }
    if (lowerText.includes('organic') || lowerText.includes('рдЬреИрд╡рд┐рдХ') || lowerText.includes('роЗропро▒рпНроХрпИ') || lowerText.includes('р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п')) {
      return langResponses?.organic || "I can help you find organic products.";
    }
    if (lowerText.includes('order') || lowerText.includes('рдСрд░реНрдбрд░') || lowerText.includes('роЖро░рпНроЯро░рпН') || lowerText.includes('р░Жр░░р▒Нр░бр░░р▒Н')) {
      return langResponses?.order || "I can help you track your orders.";
    }
    if (lowerText.includes('seasonal') || lowerText.includes('рдореМрд╕рдореА') || lowerText.includes('рокро░рпБро╡роХро╛ро▓') || lowerText.includes('р░Хр░╛р░▓р░╛р░ир▒Бр░Чр▒Бр░г')) {
      return langResponses?.seasonal || "I can show you seasonal products.";
    }

    // Default response
    return multilingual[lang].greeting[type as keyof typeof multilingual['en']['greeting']] || 
           "I'm here to help you. Please ask me about prices, products, or any assistance you need.";
  };

  const handleLanguageSelect = (languageCode: string) => {
    setSelectedLanguage(languageCode);
    setMessages([]);
    
    // Add welcome message
    setTimeout(() => {
      const lang = languageCode as keyof typeof multilingual;
      const welcomeMessage: Message = {
        type: 'assistant',
        text: multilingual[lang].greeting[userType],
        timestamp: new Date()
      };
      setMessages([welcomeMessage]);
      speak(welcomeMessage.text);
    }, 500);
  };

  const handleSampleQuestion = (question: string) => {
    handleUserMessage(question);
  };

  const handleClose = () => {
    if (isListening) stopListening();
    if (isSpeaking) speechSynthesis.cancel();
    setSelectedLanguage('');
    setMessages([]);
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center">
            <MessageSquare className="w-5 h-5 mr-2" />
            {selectedLanguage ? multilingual[selectedLanguage as keyof typeof multilingual].voiceAssistant : "Voice Assistant"}
          </DialogTitle>
        </DialogHeader>

        {!selectedLanguage ? (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold mb-4">Select your language</h3>
              <p className="text-muted-foreground mb-6">Choose your preferred language for the voice assistant</p>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              {languages.map((language) => (
                <Button
                  key={language.code}
                  variant="outline"
                  className="h-16 text-left justify-start p-4"
                  onClick={() => handleLanguageSelect(language.code)}
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">{language.flag}</span>
                    <div>
                      <p className="font-semibold">{language.name}</p>
                      <p className="text-sm text-muted-foreground">{language.speechLang}</p>
                    </div>
                  </div>
                </Button>
              ))}
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            {/* Language and Status Bar */}
            <div className="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
              <div className="flex items-center space-x-2">
                <span className="text-lg">
                  {languages.find(lang => lang.code === selectedLanguage)?.flag}
                </span>
                <span className="font-medium">
                  {languages.find(lang => lang.code === selectedLanguage)?.name}
                </span>
              </div>
              <div className="flex items-center space-x-2">
                {isListening && <Badge variant="destructive" className="animate-pulse">Listening...</Badge>}
                {isSpeaking && <Badge variant="secondary" className="animate-pulse">Speaking...</Badge>}
                <Button variant="ghost" size="sm" onClick={() => setSelectedLanguage('')}>
                  Change Language
                </Button>
              </div>
            </div>

            {/* Voice Controls */}
            <div className="flex items-center space-x-2">
              <Button
                variant={isListening ? "destructive" : "default"}
                size="sm"
                onClick={isListening ? stopListening : startListening}
                disabled={!recognition}
              >
                {isListening ? <MicOff className="w-4 h-4 mr-2" /> : <Mic className="w-4 h-4 mr-2" />}
                {isListening 
                  ? multilingual[selectedLanguage as keyof typeof multilingual].stopListening 
                  : multilingual[selectedLanguage as keyof typeof multilingual].startListening
                }
              </Button>
              
              <Button
                variant="outline"
                size="sm"
                onClick={() => isSpeaking ? speechSynthesis.cancel() : null}
                disabled={!isSpeaking}
              >
                {isSpeaking ? <VolumeX className="w-4 h-4 mr-2" /> : <Volume2 className="w-4 h-4 mr-2" />}
                {isSpeaking ? "Stop Speaking" : "Voice Output"}
              </Button>
              
              <Badge variant="outline" className="text-xs">
                {multilingual[selectedLanguage as keyof typeof multilingual].currentlySupported}
              </Badge>
            </div>

            {/* Chat Messages */}
            <Card>
              <CardContent className="p-4 min-h-[200px] max-h-[300px] overflow-y-auto">
                <div className="space-y-3">
                  {messages.map((message, index) => (
                    <div key={index} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                      <div className={`max-w-[80%] p-3 rounded-lg ${
                        message.type === 'user' 
                          ? 'bg-primary text-primary-foreground' 
                          : 'bg-muted'
                      }`}>
                        <p className="text-sm">{message.text}</p>
                        <p className="text-xs opacity-70 mt-1">
                          {message.timestamp.toLocaleTimeString()}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Sample Questions */}
            <div>
              <h4 className="font-medium mb-2">Try asking:</h4>
              <div className="space-y-2">
                {multilingual[selectedLanguage as keyof typeof multilingual].sampleQuestions[userType].map((question, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    className="text-left justify-start h-auto py-2 px-3"
                    onClick={() => handleSampleQuestion(question)}
                  >
                    <MessageSquare className="w-3 h-3 mr-2 flex-shrink-0" />
                    <span className="text-xs">{question}</span>
                  </Button>
                ))}
              </div>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default VoiceAssistantModal;